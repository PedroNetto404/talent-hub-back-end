// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalentHub.Infra.Data;

#nullable disable

namespace TalentHub.Infra.Migrations
{
    [DbContext(typeof(TalentHubContext))]
    [Migration("20241118173736_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<decimal?>("ExpectedRemuneration")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("expected_remuneration");

                    b.Property<string>("GithubUrl")
                        .HasColumnType("text")
                        .HasColumnName("github_url");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text")
                        .HasColumnName("instagram_url");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resume_url");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("summary");

                    b.Property<string[]>("_desiredJobTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("desired_job_types");

                    b.Property<string[]>("_desiredWorkplaceTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("desired_workplace_types");

                    b.Property<List<string>>("_hobbies")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("hobbies");

                    b.HasKey("Id")
                        .HasName("pk_candidates");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_candidates_email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_candidates_phone");

                    b.ToTable("candidates", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proficiency");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<string>("skill_type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("skill_type");

                    b.HasKey("Id")
                        .HasName("pk_candidate_skills");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_candidate_skills_candidate_id");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_candidate_skills_skill_id");

                    b.ToTable("candidate_skills", (string)null);

                    b.HasDiscriminator<string>("skill_type").HasValue("common");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("institution");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<double>("Workload")
                        .HasColumnType("double precision")
                        .HasColumnName("workload");

                    b.HasKey("Id")
                        .HasName("pk_certificates");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_certificates_candidate_id");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<List<string>>("_activities")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("activities");

                    b.Property<string>("experience_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("experience_type");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_experiences_candidate_id");

                    b.ToTable("experiences", (string)null);

                    b.HasDiscriminator<string>("experience_type").HasValue("Experience");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_course");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.EducationalInstitutes.EducationalInstitute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_educational_institute");

                    b.ToTable("educational_institute", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<List<string>>("_tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.CandidateLanguageSkill", b =>
                {
                    b.HasBaseType("TalentHub.ApplicationCore.Candidates.Entities.CandidateSkill");

                    b.Property<string>("SpecialProficiences")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("special_proficiences");

                    b.ToTable("candidate_skills", (string)null);

                    b.HasDiscriminator().HasValue("language");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.AcademicExperience", b =>
                {
                    b.HasBaseType("TalentHub.ApplicationCore.Candidates.Entities.Experience");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_experiences_course_id");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_experiences_institution_id");

                    b.ToTable("experiences", (string)null);

                    b.HasDiscriminator().HasValue("academic");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.ProfessionalExperience", b =>
                {
                    b.HasBaseType("TalentHub.ApplicationCore.Candidates.Entities.Experience");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("position");

                    b.ToTable("experiences", null, t =>
                        {
                            t.Property("Level")
                                .HasColumnName("professional_experience_level");
                        });

                    b.HasDiscriminator().HasValue("professional");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Candidate", b =>
                {
                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CandidateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("address_number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("address_zip_code");

                            b1.HasKey("CandidateId");

                            b1.ToTable("candidates");

                            b1.WithOwner()
                                .HasForeignKey("CandidateId")
                                .HasConstraintName("fk_candidates_candidates_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.CandidateSkill", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Candidates.Candidate", null)
                        .WithMany("Skills")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("fk_candidate_skills_candidates_candidate_id");

                    b.HasOne("TalentHub.ApplicationCore.Skills.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_skills_skill_skill_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.Certificate", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Candidates.Candidate", null)
                        .WithMany("Certificates")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("fk_certificates_candidates_candidate_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.Experience", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Candidates.Candidate", null)
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("fk_experiences_candidates_candidate_id");

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.DatePeriod", "End", b1 =>
                        {
                            b1.Property<Guid>("ExperienceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("end_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("end_year");

                            b1.HasKey("ExperienceId");

                            b1.ToTable("experiences");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId")
                                .HasConstraintName("fk_experiences_experiences_id");
                        });

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.DatePeriod", "Start", b1 =>
                        {
                            b1.Property<Guid>("ExperienceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("start_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("start_year");

                            b1.HasKey("ExperienceId");

                            b1.ToTable("experiences");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId")
                                .HasConstraintName("fk_experiences_experiences_id");
                        });

                    b.Navigation("End");

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Entities.AcademicExperience", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_course_course_id");

                    b.HasOne("TalentHub.ApplicationCore.EducationalInstitutes.EducationalInstitute", null)
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_educational_institute_institution_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Candidates.Candidate", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Experiences");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalentHub.Infra.Data;

#nullable disable

namespace TalentHub.Infra.Migrations
{
    [DbContext(typeof(TalentHubContext))]
    [Migration("20241215205006_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AutoMatchEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_match_enabled");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 670, DateTimeKind.Utc).AddTicks(3555))
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<decimal?>("ExpectedRemuneration")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("expected_remuneration");

                    b.Property<string>("GithubUrl")
                        .HasColumnType("text")
                        .HasColumnName("github_url");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text")
                        .HasColumnName("instagram_url");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resume_url");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("summary");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 670, DateTimeKind.Utc).AddTicks(3850))
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string[]>("_desiredJobTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("desired_job_types");

                    b.Property<string[]>("_desiredWorkplaceTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("desired_workplace_types");

                    b.Property<List<string>>("_hobbies")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("hobbies");

                    b.HasKey("Id")
                        .HasName("pk_candidates");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_candidates_phone");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_candidates_user_id");

                    b.ToTable("candidates", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proficiency");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("Id")
                        .HasName("pk_candidate_skills");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_candidate_skills_candidate_id");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_candidate_skills_skill_id");

                    b.ToTable("candidate_skills", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("issuer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<double>("Workload")
                        .HasColumnType("double precision")
                        .HasColumnName("workload");

                    b.HasKey("Id")
                        .HasName("pk_certificates");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_certificates_candidate_id");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<List<string>>("_activities")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("activities");

                    b.Property<string>("experience_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("experience_type");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_experiences_candidate_id");

                    b.ToTable("experiences", (string)null);

                    b.HasDiscriminator<string>("experience_type").HasValue("Experience");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.LanguageProficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("ListeningLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("beginner")
                        .HasColumnName("listening_level");

                    b.Property<string>("SpeakingLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("beginner")
                        .HasColumnName("speaking_level");

                    b.Property<string>("WritingLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("beginner")
                        .HasColumnName("writing_level");

                    b.HasKey("Id")
                        .HasName("pk_language_proficiencies");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("ix_language_proficiencies_candidate_id");

                    b.ToTable("language_proficiencies", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("about");

                    b.Property<bool>("AutoMatchEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("auto_match_enabled");

                    b.Property<string>("CareerPageUrl")
                        .HasColumnType("text")
                        .HasColumnName("career_page_url");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 678, DateTimeKind.Utc).AddTicks(6967))
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("integer")
                        .HasColumnName("employee_count");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text")
                        .HasColumnName("facebook_url");

                    b.Property<int>("FoundationYear")
                        .HasColumnType("integer")
                        .HasColumnName("foundation_year");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text")
                        .HasColumnName("instagram_url");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("legal_name");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Mission")
                        .HasColumnType("text")
                        .HasColumnName("mission");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<string>("PresentationVideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("presentation_video_url");

                    b.Property<string>("RecruitmentEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("recruitment_email");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("site_url");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("trade_name");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 678, DateTimeKind.Utc).AddTicks(7247))
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Values")
                        .HasColumnType("text")
                        .HasColumnName("values");

                    b.Property<string>("Vision")
                        .HasColumnType("text")
                        .HasColumnName("vision");

                    b.Property<List<string>>("_galery")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("galery");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_cnpj");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_phone");

                    b.HasIndex("RecruitmentEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_recruitment_email");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_companies_sector_id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.CompanySectors.CompanySector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_company_sectors");

                    b.ToTable("company_sectors", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("_tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<List<string>>("_tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Universities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("site_url");

                    b.HasKey("Id")
                        .HasName("pk_universities");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 698, DateTimeKind.Utc).AddTicks(8396))
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("hashed_password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 12, 15, 20, 50, 5, 698, DateTimeKind.Utc).AddTicks(8734))
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("related_course_skills", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.HasKey("CourseId", "SkillId")
                        .HasName("pk_related_course_skills");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_related_course_skills_skill_id");

                    b.ToTable("related_course_skills", (string)null);
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.AcademicExperience", b =>
                {
                    b.HasBaseType("TalentHub.ApplicationCore.Resources.Candidates.Entities.Experience");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<int>("CurrentSemester")
                        .HasColumnType("integer")
                        .HasColumnName("current_semester");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<int>("Period")
                        .HasColumnType("integer")
                        .HasColumnName("period");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<List<string>>("_academicEntities")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("academic_entites");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_experiences_course_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_experiences_university_id");

                    b.ToTable("experiences", (string)null);

                    b.HasDiscriminator().HasValue("academic");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.ProfessionalExperience", b =>
                {
                    b.HasBaseType("TalentHub.ApplicationCore.Resources.Candidates.Entities.Experience");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("position");

                    b.ToTable("experiences", null, t =>
                        {
                            t.Property("Level")
                                .HasColumnName("professional_experience_level");
                        });

                    b.HasDiscriminator().HasValue("professional");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Candidate", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Users.User", null)
                        .WithOne()
                        .HasForeignKey("TalentHub.ApplicationCore.Resources.Candidates.Candidate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidates_user_user_id");

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CandidateId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("address_number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("address_zip_code");

                            b1.HasKey("CandidateId");

                            b1.ToTable("candidates");

                            b1.WithOwner()
                                .HasForeignKey("CandidateId")
                                .HasConstraintName("fk_candidates_candidates_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.CandidateSkill", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Candidates.Candidate", null)
                        .WithMany("Skills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_candidate_skills_candidates_candidate_id");

                    b.HasOne("TalentHub.ApplicationCore.Resources.Skills.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_skills_skill_skill_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.Certificate", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Candidates.Candidate", null)
                        .WithMany("Certificates")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_certificates_candidates_candidate_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.Experience", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Candidates.Candidate", null)
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_experiences_candidates_candidate_id");

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.DatePeriod", "End", b1 =>
                        {
                            b1.Property<Guid>("ExperienceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("end_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("end_year");

                            b1.HasKey("ExperienceId");

                            b1.ToTable("experiences");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId")
                                .HasConstraintName("fk_experiences_experiences_id");
                        });

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.DatePeriod", "Start", b1 =>
                        {
                            b1.Property<Guid>("ExperienceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("start_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("start_year");

                            b1.HasKey("ExperienceId");

                            b1.ToTable("experiences");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId")
                                .HasConstraintName("fk_experiences_experiences_id");
                        });

                    b.Navigation("End");

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.LanguageProficiency", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Candidates.Candidate", null)
                        .WithMany("LanguageProficiencies")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_language_proficiencies_candidate_candidate_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Companies.Company", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.CompanySectors.CompanySector", null)
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_company_sector_sector_id");

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("address_number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("address_zip_code");

                            b1.HasKey("CompanyId");

                            b1.ToTable("companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId")
                                .HasConstraintName("fk_companies_companies_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Users.User", b =>
                {
                    b.OwnsOne("TalentHub.ApplicationCore.Resources.Users.ValueObjects.Token", "RefreshToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("Expiration")
                                .HasColumnType("bigint")
                                .HasColumnName("refresh_token_expiration");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("refresh_token_value");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("related_course_skills", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_related_course_skills_courses_course_id");

                    b.HasOne("TalentHub.ApplicationCore.Resources.Skills.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_related_course_skills_skill_skill_id");
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Entities.AcademicExperience", b =>
                {
                    b.HasOne("TalentHub.ApplicationCore.Resources.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_courses_course_id");

                    b.HasOne("TalentHub.ApplicationCore.Resources.Universities.University", null)
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_universities_university_id");

                    b.OwnsOne("TalentHub.ApplicationCore.Shared.ValueObjects.DatePeriod", "ExpectedGraduation", b1 =>
                        {
                            b1.Property<Guid>("AcademicExperienceId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Month")
                                .HasColumnType("integer")
                                .HasColumnName("expected_graduation_month");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("expected_graduation_year");

                            b1.HasKey("AcademicExperienceId");

                            b1.ToTable("experiences");

                            b1.WithOwner()
                                .HasForeignKey("AcademicExperienceId")
                                .HasConstraintName("fk_experience_experience_id");
                        });

                    b.Navigation("ExpectedGraduation")
                        .IsRequired();
                });

            modelBuilder.Entity("TalentHub.ApplicationCore.Resources.Candidates.Candidate", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Experiences");

                    b.Navigation("LanguageProficiencies");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
